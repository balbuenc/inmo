@page "/Rules"
@using Model
@using Interfaces

@inject IRuleService RuleService
@inject IMessageService MessageService

@inject NavigationManager NavigationManager

@attribute [Authorize]

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Buttons




<div class="container-fluid">
    <p>@Message</p>
    <span class="error">@ErrorDetails</span>

    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-title" role="banner"><b>Reglas</b></div>
        </div>
    </div>


    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                <div class="alert alert-title" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
                <SfGrid ID="Grid" @ref="Grid" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems" DataSource="@GridData" Locale="es-ES"
                        ShowColumnChooser="true" AllowTextWrap="true" AllowFiltering="true">
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>

                    <GridEvents OnActionBegin="OnBeginHandler" OnActionComplete="OnCompleteHandler" TValue="Rule"></GridEvents>
                    <GridPageSettings PageSize="30"></GridPageSettings>

                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog" Dialog="DialogParams">
                        <HeaderTemplate>
                            @{
                                    var regla = (context as Rule);
                            }
                            <span>Detalle de la regla: @(regla.regla)</span>
                        </HeaderTemplate>
                        <Template>
                            @{
                                    var regla = (context as Rule);
                                   

                            }
                            <div>
                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <SfNumericTextBox @bind-Value="@(regla.id_regla)" Enabled="false" Placeholder="ID" FloatLabelType="FloatLabelType.Always"></SfNumericTextBox>
                                    </div>
                                </div>
                                <div class="form-row">
                                    <div class="form-group col-md-6">
                                        <SfTextBox @bind-Value="@(regla.regla)" Enabled="true" Placeholder="Regla" FloatLabelType="FloatLabelType.Always"> </SfTextBox>
                                    </div>
                                    <div class="form-group col-md-6">

                                        <SfDropDownList DataSource="@messages"
                                                        TItem="Message"
                                                        TValue="Int32"
                                                        @bind-Value="@(regla.id_mensaje)"
                                                        Placeholder="Mensaje"
                                                        FloatLabelType="FloatLabelType.Always">
                                            <DropDownListFieldSettings Value="id_mensaje" Text="titulo"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <SfNumericTextBox @bind-Value="@(regla.fraccion_desde)" Enabled="true" Placeholder="Desde frac." FloatLabelType="FloatLabelType.Always"> </SfNumericTextBox>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <SfNumericTextBox @bind-Value="@(regla.fraccion_hasta)" Enabled="true" Placeholder="Hasta frac." FloatLabelType="FloatLabelType.Always"> </SfNumericTextBox>
                                    </div>

                                </div>

                                <div class="form-row">
                                    <div class="form-group col-md-3">
                                        <SfNumericTextBox @bind-Value="@(regla.mes_atraso)" Enabled="true" Placeholder="Meses atraso" FloatLabelType="FloatLabelType.Always"> </SfNumericTextBox>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <SfNumericTextBox @bind-Value="@(regla.dias_vencidos)" Enabled="true" Placeholder="Días vencidos hasta" FloatLabelType="FloatLabelType.Always"> </SfNumericTextBox>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <SfNumericTextBox @bind-Value="@(regla.dias_vencidos_desde)" Enabled="true" Placeholder="Días vencidos desde" FloatLabelType="FloatLabelType.Always"> </SfNumericTextBox>
                                    </div>
                                    <div class="form-group col-md-3">
                                        <SfDropDownList DataSource="@LocalTipo"
                                                        TItem="Tipo"
                                                        TValue="String"
                                                        @bind-Value="@(regla.tipo)"
                                                        Placeholder="Tipo"
                                                        FloatLabelType="FloatLabelType.Always">
                                            <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                </div>

                            </div>
                        </Template>
                    </GridEditSettings>
                    <GridColumns>

                        <GridColumn Field=@nameof(Rule.id_regla) HeaderText="ID" TextAlign="TextAlign.Center" Width="5" IsPrimaryKey="true"></GridColumn>

                        <GridColumn Field=@nameof(Rule.regla) HeaderText="Regla" Width="20"></GridColumn>
                        <GridColumn Field=@nameof(Rule.fraccion_desde) HeaderText="Desde Frac." Width="20"></GridColumn>
                        <GridColumn Field=@nameof(Rule.fraccion_hasta) HeaderText="Hasta Frac." Width="20"></GridColumn>
                        <GridColumn Field=@nameof(Rule.titulo) HeaderText="Mensaje" Width="30"></GridColumn>

                        <GridColumn Field=@nameof(Rule.mes_atraso) HeaderText="Meses de atraso" Width="15"></GridColumn>
                        <GridColumn Field=@nameof(Rule.dias_vencidos) HeaderText="Días vencidos hasta" Width="30"></GridColumn>
                        <GridColumn Field=@nameof(Rule.dias_vencidos_desde) HeaderText="Días vencidos desde" Width="30"></GridColumn>
                        <GridColumn Field=@nameof(Rule.tipo) HeaderText="Tipo" Width="15"></GridColumn>



                    </GridColumns>
                </SfGrid>
                }

            </div>
            <SfDialog Target="#target"
                      Width="300px"
                      Height="130px"
                      IsModal="true"
                      ShowCloseIcon="false"
                      @bind-Visible="DeleteRecordConfirmVisibility">
                <DialogTemplates>
                    <Header> Eliminar el registro? </Header>
                    <Content>
                        <div class="button-container">
                            <button type="submit"
                                    class="e-btn e-normal e-primary"
                                    @onclick="ConfirmDeleteYes">
                                Yes
                            </button>
                            <button type="submit"
                                    class="e-btn e-normal"
                                    @onclick="ConfirmDeleteNo">
                                No
                            </button>
                        </div>
                    </Content>
                </DialogTemplates>
            </SfDialog>
            <SfToast @ref="ToastObj" Title="@ToastTitle" Content="@ToastContent" CssClass="@ToastCssClass">
                <ToastPosition X="Right" Y="Bottom"></ToastPosition>
            </SfToast>


        </div>

    </div>

</div>

<style>
    #toast_default .e-meeting::before {
        content: "\e705";
        font-size: 17px;
    }
</style>

@code {

    public string Message { get; set; }
    public string[] ToolbarItems = new string[] { "Add", "Edit", "Delete", "Update", "Cancel", "Search" };
    public string ErrorDetails = "";

    public IEnumerable<Rule> GridData { get; set; }
    public IEnumerable<Message> messages { get; set; }


    public bool EditDialogVisibility { get; set; } = false;
    public bool DeleteRecordConfirmVisibility { get; set; } = false;

    public DateTime hoy = DateTime.Today;
    public DateTime t;


    public Int32 ID = 0;

    public string UserName;

    SfToast ToastObj;

    private int ToastFlag = 0;
    private string ToastTitle = "";
    private string ToastContent = "";
    private string ToastCssClass = "";


    private class ToastOption
    {
        public string Title { get; set; }
        public string Content { get; set; }
        public string CssClass { get; set; }
    }

    private ToastOption[] Toasts = new ToastOption[] {
        new ToastOption { Title = "Warning !", Content = "El registro se eliminó con éxito.", CssClass = "e-toast-warning" },
        new ToastOption { Title = "Success !", Content = "El registro se modificó con éxito.", CssClass = "e-toast-success" },
        new ToastOption { Title = "Error !", Content = "A problem has been occurred while submitting your data.", CssClass = "e-toast-danger" },
        new ToastOption { Title = "Information !", Content = "Please read the comments carefully.", CssClass = "e-toast-info" }
    };

    public class Tipo
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }

    List<Tipo> LocalTipo = new List<Tipo> {
    new Tipo() { ID= "M", Text= "Mes" },
    new Tipo() { ID= "D", Text= "Día" },
  };


    SfGrid<Rule> Grid { get; set; }

    private DialogSettings DialogParams = new DialogSettings { Width = "850px", EnableResize = true, AllowDragging = true };



    protected override async Task OnInitializedAsync()
    {
        try
        {
            GridData = await RuleService.GetAllRules();
            messages = await MessageService.GetAllMessages();

        }
        catch (Exception ex)
        {
            Message = "Error al obtener tipos de regla: " + ex.Message;
        }
    }



    private async Task OnBeginHandler(ActionEventArgs<Rule> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await SaveRule((Rule)Args.Data);

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            ID = ((Rule)Args.Data).id_regla;

            // Open Delete confirmation dialog
            this.DeleteRecordConfirmVisibility = true;
            StateHasChanged();
        }

        return;
    }

    private async Task OnCompleteHandler(ActionEventArgs<Rule> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await ShowToast(1);
            GridData = await RuleService.GetAllRules();
            Grid.Refresh();

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {

            StateHasChanged();
        }

        return;
    }

    protected async Task SaveRule(Rule accountType)
    {
        await RuleService.SaveRule(accountType);
        Grid.Refresh();

    }

    protected async Task DeleteRule(int id)
    {
        await RuleService.DeleteRule(id);
        await ShowToast(0);
        Grid.Refresh();

    }

    protected void ReloadPage()
    {
        NavigationManager.NavigateTo("/Rules", true);
    }

    public async void ConfirmDeleteYes()
    {
        // The user selected Yes to delete the
        // seleted Help Desk Ticket
        // Delete the record
        await DeleteRule(ID);

        // Close the dialog
        this.DeleteRecordConfirmVisibility = false;

        // Refresh the SfGrid
        // so the deleted record will not show
        Grid.Refresh();
    }

    public void ConfirmDeleteNo()
    {
        // Open the dialog
        // to give the user a chance
        // to confim they want to delete the record
        this.DeleteRecordConfirmVisibility = false;
    }

    private async Task ShowToast(int ix)
    {
        this.ToastTitle = this.Toasts[ix].Title;
        this.ToastContent = this.Toasts[ix].Content;
        this.ToastCssClass = this.Toasts[ix].CssClass;
        await Task.Delay(200);

        await this.ToastObj.Show();

    }



    private async Task HideToast()
    {

        await this.ToastObj.Hide("All");
    }

    private void Navigate(Rule acc)
    {
        NavigationManager.NavigateTo($"/AccDetails/{acc.id_regla}");
    }
}


