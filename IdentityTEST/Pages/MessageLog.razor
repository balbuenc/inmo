@page "/MessageLogs"
@using Model
@using Interfaces

@inject ISendMessageLogService SendMessageServiceService


@inject NavigationManager NavigationManager

@attribute [Authorize]

@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Buttons




<div class="container-fluid">
    <p>@Messg</p>
    <span class="error">@ErrorDetails</span>

    <div class="col-lg-12" style="padding:1px; height:50px">
        <div class="content-wrapper">
            <div class="alert alert-title" role="banner"><b>Mensajes enviados</b></div>
        </div>
    </div>


    <div class="col-lg-12 control-section">
        <div class="content-wrapper">
            <div class="row">
                @if (GridData == null)
                {
                    <div class="alert alert-title" role="alert"><p><em>Cargando datos...</em></p></div>
                }
                else
                {
            <SfGrid ID="Grid" @ref="Grid" AllowPaging="true" AllowSorting="true" Toolbar="@ToolbarItems" DataSource="@GridData" Locale="es-ES" AllowExcelExport="true"
                    ShowColumnChooser="true" AllowTextWrap="true" AllowFiltering="true">

                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                <GridEvents OnActionBegin="OnBeginHandler" OnActionComplete="OnCompleteHandler" TValue="SendMessageLog" OnToolbarClick="ToolbarClickHandler"></GridEvents>
                <GridPageSettings PageSize="20"></GridPageSettings>


                <GridColumns>

                    <GridColumn Field=@nameof(SendMessageLog.id_envio_mensaje) HeaderText="ID" TextAlign="TextAlign.Center" Width="5" IsPrimaryKey="true"></GridColumn>

                    <GridColumn Field=@nameof(SendMessageLog.fecha) HeaderText="Fecha" Format="dd/MM/yyyy" Width="15"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.id_fraccion) HeaderText="Fracción" Width="15"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.id_lote) HeaderText="Lote" Width="10"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.id_manzana) HeaderText="Manzana" Width="10"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.nombre_para_documento) HeaderText="Cliente" Width="25"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.documento) HeaderText="Doc." Width="15"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.telefono_particular) HeaderText="Cel." Width="15"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.texto) HeaderText="Mensaje" Visible="false" Width="50"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.fecha_vencimiento) HeaderText="Venc." Format="dd/MM/yyyy" Width="15"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.comando) HeaderText="Comado" Visible="false" Width="30"></GridColumn>
                    <GridColumn Field=@nameof(SendMessageLog.respuesta) HeaderText="Respuesta" Width="20"></GridColumn>
                </GridColumns>
            </SfGrid>
                }

            </div>
            <SfDialog Target="#target"
                      Width="300px"
                      Height="130px"
                      IsModal="true"
                      ShowCloseIcon="false"
                      @bind-Visible="DeleteRecordConfirmVisibility">
                <DialogTemplates>
                    <Header> Eliminar el registro? </Header>
                    <Content>
                        <div class="button-container">
                            <button type="submit"
                                    class="e-btn e-normal e-primary"
                                    @onclick="ConfirmDeleteYes">
                                Yes
                            </button>
                            <button type="submit"
                                    class="e-btn e-normal"
                                    @onclick="ConfirmDeleteNo">
                                No
                            </button>
                        </div>
                    </Content>
                </DialogTemplates>
            </SfDialog>
            <SfToast @ref="ToastObj" Title="@ToastTitle" Content="@ToastContent" CssClass="@ToastCssClass">
                <ToastPosition X="Right" Y="Bottom"></ToastPosition>
            </SfToast>


        </div>

    </div>

</div>

<style>
    #toast_default .e-meeting::before {
        content: "\e705";
        font-size: 17px;
    }
</style>

@code {

    public string Messg { get; set; }
    public string[] ToolbarItems = new string[] { "Search", "ExcelExport", "ColumnChooser" };
    public string ErrorDetails = "";

    public IEnumerable<SendMessageLog> GridData { get; set; }


    public bool EditDialogVisibility { get; set; } = false;
    public bool DeleteRecordConfirmVisibility { get; set; } = false;

    public Int32 ID = 0;

    public string UserName;

    SfToast ToastObj;

    private int ToastFlag = 0;
    private string ToastTitle = "";
    private string ToastContent = "";
    private string ToastCssClass = "";


    private class ToastOption
    {
        public string Title { get; set; }
        public string Content { get; set; }
        public string CssClass { get; set; }
    }

    private ToastOption[] Toasts = new ToastOption[] {
        new ToastOption { Title = "Warning !", Content = "El registro se eliminó con éxito.", CssClass = "e-toast-warning" },
        new ToastOption { Title = "Success !", Content = "El registro se modificó con éxito.", CssClass = "e-toast-success" },
        new ToastOption { Title = "Error !", Content = "A problem has been occurred while submitting your data.", CssClass = "e-toast-danger" },
        new ToastOption { Title = "Information !", Content = "Please read the comments carefully.", CssClass = "e-toast-info" }
    };


    SfGrid<SendMessageLog> Grid { get; set; }

    private DialogSettings DialogParams = new DialogSettings { Width = "850px", EnableResize = true, AllowDragging = true };



    protected override async Task OnInitializedAsync()
    {
        try
        {
            GridData = await SendMessageServiceService.GetAllSendMessageLogs();


        }
        catch (Exception ex)
        {
            Messg = "Error al obtener tipos de mensaje: " + ex.Message;
        }
    }



    private async Task OnBeginHandler(ActionEventArgs<SendMessageLog> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await SaveMessage((SendMessageLog)Args.Data);

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            ID = ((SendMessageLog)Args.Data).id_mensaje;

            // Open Delete confirmation dialog
            this.DeleteRecordConfirmVisibility = true;
            StateHasChanged();
        }

        return;
    }

    private async Task OnCompleteHandler(ActionEventArgs<SendMessageLog> Args)
    {
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            await ShowToast(1);
            GridData = await SendMessageServiceService.GetAllSendMessageLogs();
            Grid.Refresh();

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {

            StateHasChanged();
        }

        return;
    }

    protected async Task SaveMessage(SendMessageLog accountType)
    {
        await SendMessageServiceService.SaveSendMessageLog(accountType);
        Grid.Refresh();

    }

    protected async Task DeleteMessage(int id)
    {
        await SendMessageServiceService.DeleteSendMessageLog(id);
        await ShowToast(0);
        Grid.Refresh();

    }

    protected void ReloadPage()
    {
        NavigationManager.NavigateTo("/MessageLogs", true);
    }

    public async void ConfirmDeleteYes()
    {
        // The user selected Yes to delete the
        // seleted Help Desk Ticket
        // Delete the record
        await DeleteMessage(ID);

        // Close the dialog
        this.DeleteRecordConfirmVisibility = false;

        // Refresh the SfGrid
        // so the deleted record will not show
        Grid.Refresh();
    }

    public void ConfirmDeleteNo()
    {
        // Open the dialog
        // to give the user a chance
        // to confim they want to delete the record
        this.DeleteRecordConfirmVisibility = false;
    }

    private async Task ShowToast(int ix)
    {
        this.ToastTitle = this.Toasts[ix].Title;
        this.ToastContent = this.Toasts[ix].Content;
        this.ToastCssClass = this.Toasts[ix].CssClass;
        await Task.Delay(200);

        await this.ToastObj.Show();

    }



    private async Task HideToast()
    {

        await this.ToastObj.Hide("All");
    }

    private void Navigate(SendMessageLog acc)
    {
        NavigationManager.NavigateTo($"/AccDetails/{acc.id_mensaje}");
    }


    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport") //Id is combination of Grid's ID and itemname
        {
            ExcelExportProperties ExcelProperties = new ExcelExportProperties();
            ExcelProperties.FileName = "Notificaciones.xlsx";
            await this.Grid.ExcelExport(ExcelProperties);
        }

    }
}


